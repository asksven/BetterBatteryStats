apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
//apply plugin: 'com.google.gms.google-services'


android {
    compileSdkVersion 25
    buildToolsVersion "26.0.2"

    playAccountConfigs {
        defaultAccountConfig {
            jsonFile = file('sa-google-play.json')
        }
    }

    play {
        track = 'beta'
        untrackOld = true // will untrack 'alpha' while upload to 'beta'
    }

    defaultConfig {
        applicationId "com.asksven.betterbatterystats"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 91
        versionName "2.3"
        versionNameSuffix = getBuildSuffix()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
        testBuildType "debug"
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [HOCKEYAPP_APP_ID: System.getenv("HOCKEYAPP_APP_ID") ?: "xx-xx-xxxx"]


    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_RELEASE") ?: "app.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
        debug {
            //storeFile file(System.getenv("KEYSTORE_DEBUG") ?: "app.keystore")
        }
    }

    // we have different package name for the variants
    flavorDimensions "edition"
    productFlavors {
        gplay {
            dimension "edition"
            applicationId "com.asksven.betterbatterystats"
            signingConfig signingConfigs.release
            playAccountConfig = playAccountConfigs.defaultAccountConfig


        }
        xdaedition {
            dimension "edition"
            applicationId "com.asksven.betterbatterystats_xdaedition"
            signingConfig signingConfigs.debug
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("gplay") && variant.buildType.name == "debug") {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
        if (names.contains("xdaedition") && variant.buildType.name == "release") {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }

    }
    // and a naming policy for the apks
    applicationVariants.all { variant ->
        variant.outputs.all {
            def project = "betterbatterystats"
            def SEP = "_"
            def flavor = variant.productFlavors[0].name
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName

            //def newApkName = project + SEP + flavor + SEP + buildType + SEP + version + ".apk"
            def newApkName = project + SEP + flavor + SEP + buildType + SEP + version + ".apk"
            outputFileName = newApkName
        }

    }



    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/ASL2.0'
    }
    lintOptions {
        disable 'MissingTranslation'
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // for local tests (app/src/test)
    // Required for instrumented tests (app/src/androidTest)
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile files('libs/RootTools-5.0.aar')
    compile files('libs/RootShell-1.6.aar')
    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'de.cketti.library.changelog:ckchangelog:1.2.2'
    compile 'com.google.android.apps.dashclock:dashclock-api:2.0.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'com.android.support:design:25.4.0'
    compile 'com.twofortyfouram:android-plugin-client-sdk-for-locale:4.0.3'
    compile 'com.android.support:support-compat:25.4.0'
    compile 'com.android.support:support-vector-drawable:25.4.0'
    compile 'net.hockeyapp.android:HockeySDK:5.0.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.android.support.test:rules:1.0.1'
}


def getBuildSuffix() {
    def ret = ""
    def buildNumber = System.getenv("CIRCLE_BUILD_NUM")
    if (buildNumber != null) {
        ret = "-" + buildNumber
    }

    println ">>>>> Build number: \"" + ret + "\"";
    return ret
}
